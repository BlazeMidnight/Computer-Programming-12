from math import log10

class Node:
    __data = None
    __nxt = None
    __prev = None
    def __init__(self, data, nxt=None, prev=None):
        self.__data = data
        self.__nxt = nxt
        self.__prev = prev

    def __str__(self):
        d = self.__data
        n = self.__nxt
        p = self.__prev

        return "Data: "+str(d)+" >> "+str(type(n))

    def hasNext(self):
        return self.__nxt != None

    def getNext(self):
        return self.__nxt
    def setNext(self, nxt):
        self.__nxt = nxt

    def getPrev(self):
        return self.__prev
    def setPrev(self, prev):
        self.__prev = prev

    def getData(self):
        return self.__data
    def setData(self, data):
        self.__data = data

class myLinkedList:
    __head = None
    __prev = None
    __size = 0

    def __init__(self):
        self.__head = None
        

    def __str__(self):
        curr = self.__head
        out = "<0> ... "
        if(curr != None):
            out += str(curr)

        i = 1
        while(curr.hasNext()):
            curr = curr.getNext()
            out += "\n<"+str(i)+"> "+("..."[int(log10(i)):])+" "+str(curr)
        return out

    def add(self, element):
        newNode = Node(element)
        if self.__head == None:
            self.__head = newNode
            self.__head.setNext(self.__head)
        else:
            curr = self.__head
            prev = self.__prev
            for i in range(self.__size-1):
                curr = curr.getNext()
                prev = curr.getPrev()
            curr.setNext(newNode)
            self.__head.setPrev(curr)
            #newNode.setNext(self.__head)
        self.__size += 1
        return
 
    def remove(self, index):
        if index > self.__size:
            return

        if self.__size == 1:
            seld.__head = None
            self.__size = 0

        if index == 0:
            self.__head.setData(self.__head.getNext())
            self.__head.setPrev(None)
            self.__size -= 1
            return

        if index == self.__size - 1:
            self.__tail.setData(self.__tail.getPrev())
            self.__tail.setNext(None)
            self.__size -= 1
            return

        curr = self.__head
        prev = self.__prev

        for i in range(self.__size):
            if(i == index):
                curr.setPrev(prev.getPrev)
                prev.setNext(curr.getNext())
                self.__size -= 1
                return
            else:
                prev = curr
                curr = curr.getNext()
     

        

    def get(self, index):
        curr = self.__head
        while curr.getData() is not index:
            if curr == None:
                return None
            curr = curr.getNext()
        return curr.getData()

    def set(self, element, index):
        if index > self.__size:
            return
        curr = self.__head
        for i in range(1, index):
            curr = curr.getNext()
        curr.setData(element)
        return

    def isEmpty(self):
        return self.__head == None 

    def size(self):
        return self.__size
    

LL = myLinkedList()
LL.add(3)
LL.add(4)
LL.add(5)
LL.add(6)

LL.remove(0)

LL.add(9)



print(LL)



    
