'''
Advantages Of LinkedList:

    No memory wastage: No need to give the initial size of the linked list and  pre-allocate the memory, which saves space. 
    Implementation: Linear data structures are often easily implemented using a linked list.
    Insertion and Deletion Operations: There is no need to shift elements after the insertion or deletion of an element, which saves time.

Disadvantages Of LinkedList:

    Memory usage: More memory is required in the linked list as compared to an array. Because in a linked list, a pointer is also required to store the address of the next element and it requires extra memory for itself.
    Traversal: In a Linked list traversal is more time-consuming as compared to an array. Direct access to an element is not possible in a linked list as in an array by index. 
    Random Access: Random access is not possible in a linked list due to its dynamic memory allocation.
'''

'''
Advantages Of ArrayList:

    Transveral: Provides fast iteration of elements using indexing.
    Memory Coherance: elements are stored in a sequential memory location.

Disadvantages Of ArrayList:

    Time: Addition or deletion of data from the middle is time consuming as data needs to be shifted to update the list
    Size of Array: There is oftan wasted space when the arrayList resizes after reaching it's capacity


'''


from random import randint
import math

class MyArrayList:
    arr = []
    __size = 0

    def __init__(self):
        self.arr = [None]*10

    def __str__(self): ##overriding
        return "["+", ".join([str(a) for a in self.arr])+"]"

    def get(self, index): ##index out of bound error thrown in the future
        if(self.arr[index] != None):
            return self.arr[index]
        else:
            raise IndexError("Please make sure you index input is correct.")

    def set(self, element, index): ## index out of bounds error thrown in the future
        if(self.arr[index] != None):
            self.arr[index] = element
        else:
            raise IndexError("Please make sure you index input is correct.")

    def size(self):
        return self.__size

    def isEmpty(self):
        return a.size() == 0


    def add(self, element): 
        if(self.__size >= len(self.arr)):
            newArr = [None]*len(self.arr)*2
            for i in range(0, len(self.arr)):
                newArr[i] = self.arr [i]
            self.arr = newArr
        self.arr[self.__size] = element
        self.__size += 1
        return


    def remove(self, index): ##remove via index
        for i in range(index,len(self.arr)-1):
            self.arr[i] = self.arr[i+1]
            #if(self.arr[i] == None):
             #   break
        self.__size -= 1


from math import log10
import math

class Node:
    __data = None
    __nxt = None
    def __init__(self, data, nxt=None):
        self.__data = data
        self.__nxt = nxt

    def __str__(self):
        d = self.__data
        n = self.__nxt

        return "Data: "+str(d)+" >> "+str(type(n))

    def hasNext(self):
        return self.__nxt != None

    def getNext(self):
        return self.__nxt
    def setNext(self, nxt):
        self.__nxt = nxt

    def getData(self):
        return self.__data
    def setData(self, data):
        self.__data = data

class myLinkedList:
    __head = None
    __size = 0

    def __init__(self):
        self.__head = None
        

    def __str__(self):
        curr = self.__head
        out = "<0> ... "
        if(curr != None):
            out += str(curr)

        i = 1
        while(curr.hasNext()):
            curr = curr.getNext()
            out += "\n<"+str(i)+"> "+("..."[int(log10(i)):])+" "+str(curr)
        return out

    def add(self, element):
        newNode = Node(element)
        if self.__head == None:
            self.__head = newNode

        else:
            curr = self.__head
            while(curr.hasNext()):
                curr = curr.getNext()
            curr.setNext(newNode)
        self.__size += 1
        return
 
    def remove(self, index):
        if index > self.__size:
            return
        curr = self.__head
        prev = None
        for i in range(1, self.__size+1):
            if(i == index):
                prev.setNext(curr.getNext())
                self.__size -= 1
                return
            else:
                prev = curr
                curr = curr.getNext()

    def get(self, index):
        curr = self.__head
        while curr.getData() is not index:
            if curr == None:
                return None
            curr = curr.getNext()
        return curr.getData()

    def set(self, element, index):
        if index > self.__size:
            return
        curr = self.__head
        for i in range(1, index):
            curr = curr.getNext()
        curr.setData(element)
        return

    def isEmpty(self):
        return self.__head == None 

    def size(self):
        return self.__size

'''
|=====================================================================|
'''

def sieveOfEratosthenes(n):
    primes = myLinkedList()
    for i in range(1, n):
        primes.add(i+1)

    m = 2
    while(m <= int(math.sqrt(n))):
        for a in range(m*2-1, n+1, m):
            primes.set(None, a)
        m += 1

    return primes

'''
I decided to use a LinkedList for the Sieve Of Eratosthenes. The time
complexity of Linkedlist and ArrayList are basically the same, O(n).
The reason why I ennded up using an array list is because Linked Lists
take up less space complexity. This is because, invitably there will
be lits of empty spaces, "None", that are taking up unsessacary space. 
'''


def iterativeSieve(n):
    primesList = MyArrayList()
    num = 2
    while primesList.size() < n:
        flag = True
        for i in range(2, num):
            if num % i == 0:
                flag = Flase
        if(flag):
            primesList.add(num)
        n+=1

'''
I decided to use a arrayList for the Iterative Sieve. At first glance,
there isn'tmuch a diffrence for time complexity using the Linkedlist and
ArrayList as the both are O(n). But looking at it more closely, you can
see there is less of a chance for the ArrayList to be O(n) in this instance.
This is because we aren't adding many elements, so the array doesn't have
todouble to accodenmate this change. For the array to be O(n), n > 30, this
is because there are 10 spaces for elements originally in the list, 31 is
the 11th element. The down side with using an ArrayList is size. There is
oftan lots of empty spaces, "None", that are taking up space. 
'''



'''
|=====================================================================|
'''
#print(iterativeSieve(100))
print(sieveOfEratosthenes(100))       
'''
|=====================================================================|
'''    

    

    
