arr = [3, 2, 5, 7, 1, 4, 6, 9, 8]

def insertionSort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i-1
        while j >=0 and key < arr[j] :
                arr[j+1] = arr[j]
                j -= 1
        arr[j+1] = key


def selectionSort(arr):
    size = len(arr)
    for s in range(len(arr)):
        minIdx = s
        for i in range(s+1, len(arr)):
            if arr[i] < arr[minIdx]:
                minIdx = i
        (arr[s], arr[minIdx]) = (arr[minIdx], arr[s])
        
    
def quickSort(arr):
    return quickSortH(arr, 0, len(arr)-1)

def quickSortH(arr, low, high):
    if low < high:
        i = low - 1
        for j in range(low, high):
            if arr[j] <= arr[high]:
                i += 1
                (arr[i], arr[j]) = (arr[j], arr[i])
        (arr[i + 1], arr[high]) = (arr[high], arr[i + 1])
        pi = i + 1

        quickSortH(arr, low, pi - 1)
        quickSortH(arr, pi + 1, high))

def mergeSort(arr):
    if len(arr) > 1:
        mid = len(arr)//2
        left = arr[:mid]
        right = arr[mid:]
        mergeSort(left)
        mergeSort(right) 
        b = c = d = 0

        while b < len(left) and c < len(right):
            if left[b] < right[c]:
                arr[d] = left[b]
                b += 1
            else:
                arr[d] = right[c]
                c += 1
            d += 1

        while b < len(left):
            arr[d] = left[b]
            b += 1
            d += 1

        while c < len(right):
            arr[d] = right[c]
            c += 1
            d += 1
    return arr
            
arr = [0,1,3,5,7,9,2,4,6,8] 
print(mergeSort(arr)) 

quickSort(arr)
print(arr)
